<?xml version="1.0" encoding="UTF-8"?>
<!-- 注意下面配置中的spring-*.xsd的版本号要与使用的jar包匹配 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 只解析除controller之外的注解(即解析service、dao), 避免重复加载导致事务失效  -->
    <context:component-scan base-package="cn.lcvc.service">
        <!-- annotation为spting-mvc中解析的内容 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 配置数据源 -->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <!-- 换成自己的数据库路径 -->
        <!--<property name="url" value="jdbc:mysql://localhost:3306/eh"></property>-->
        <property name="url" value="jdbc:mysql://192.168.23.123:3306/eh"></property>
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>
    </bean>
    <!-- 配置SessionFactory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- packagesToScan 扫描包所在路径（name中的内容其实是个关键字，可以扫描一整个包） -->
        <property name="packagesToScan">
            <list>
                <!-- 此处可添加多个entity -->
                <value>java</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <!-- 第一次生成数据库的时候用create，之后换成update，否则内容会清空 -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext
                </prop>
                <prop key="hibernate.connection.url">jdbc:mysql://localhost:3306</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
            </props>
        </property>

        <property name="annotatedClasses">
            <list>
               <value>cn.lcvc.POJO.User</value>
                <value>cn.lcvc.POJO.Admin</value>
                <value>cn.lcvc.POJO.AdminPermissions</value>
                <value>cn.lcvc.POJO.Favorites</value>
                <value>cn.lcvc.POJO.Message</value>
                <value>cn.lcvc.POJO.Order</value>
                <value>cn.lcvc.POJO.Product</value>
                <value>cn.lcvc.POJO.ProductImg</value>
                <value>cn.lcvc.POJO.ProductType</value>
                <value>cn.lcvc.POJO.School</value>
                <value>cn.lcvc.POJO.ShoppingCartItem</value>
            </list>
        </property>
        <property name="mappingLocations">
            <list>
                <value>classpath:pojo-xml/User.hbm.xml</value>
                <value>classpath:pojo-xml/Admin.hbm.xml</value>
                <value>classpath:pojo-xml/AdminPermissions.hbm.xml</value>
                <value>classpath:pojo-xml/Favorites.hbm.xml</value>
                <value>classpath:pojo-xml/Message.hbm.xml</value>
                <value>classpath:pojo-xml/Order.hbm.xml</value>
                <value>classpath:pojo-xml/Product.hbm.xml</value>
                <value>classpath:pojo-xml/ProductImg.hbm.xml</value>
                <value>classpath:pojo-xml/ProductType.hbm.xml</value>
                <value>classpath:pojo-xml/School.hbm.xml</value>
                <value>classpath:pojo-xml/ShoppingCartItem.hbm.xml</value>
            </list>
        </property>

    </bean>
    <!-- 配置一个事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 拦截的是下段配置aop里设置的路径，即txPointcut中配置的路径 -->
            <!-- 具体的propagation含义请自查 -->
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="put*" propagation="REQUIRED" />
            <tx:method name="use*" propagation="REQUIRED" />
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />
            <tx:method name="add*" propagation="REQUIRED" read-only="false" />
            <tx:method name="del*" propagation="REQUIRED" read-only="false" />
            <tx:method name="*" read-only="false" />
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层（service层）实施事务 -->
        <aop:pointcut id="txPointcut"
                      expression="execution(* cn.lcvc.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
    </aop:config>
</beans>